
project (Madara) : install, using_ace, using_splice, splice_transport, using_ndds, using_boost, madara_zmq, using_ssl, ssl_filters, ndds_transport, cid, no_karl, no_xml, port/python/using_python, python_callbacks, null_lock, port/java/using_java, port/java/using_android, port/java/using_openjdk, using_simtime {

  sharedname = MADARA
  dynamicflags += MADARA_BUILD_DLL MADARA_LOGGER_BUILD_DLL
  libout = $(MADARA_ROOT)/lib
  
  prebuild = perl $(MADARA_ROOT)/bin/generate_version_include.pl
  
  specific(prop:microsoft) {
    DisableSpecificWarnings += 4005
  }
 
  includes += $(MADARA_ROOT)/include
  libpaths += $(MADARA_ROOT)/lib 

  verbatim (gnuace, local) {
    CPPFLAGS += -g -Og -std=c++11 -Wall
  }
  
  Documentation_Files {
    INSTALL.txt
    LICENSE.txt
    README.txt
    VERSION.txt
  }

  Build_Files {
    $(MADARA_ROOT)/Madara.mwc
    $(MADARA_ROOT)/default.features
    doxygen_help_gen.mpb
    Madara.mpc
    Splice_DDS_Transport.mpc
    NDDS_Transport.mpc
    splice_transport.mpb
    ndds_transport.mpb
    python_callbacks.mpb
    madara_zmq.mpb
    null_lock.mpb
    stl_lock.mpb
    using_ace.mpb
    using_boost.mpb
    using_ssl.mpb
    ssl_filters.mpb
    using_cid.mpb
    using_madara.mpb
    no_karl.mpb
    no_xml.mpb
    port/python/using_python.mpb
    using_splice.mpb
    using_splice_idl.mpb
    using_ndds.mpb
    using_ndds_idl.mpb
    using_zmq.mpb
    port/java/using_java.mpb
    port/java/using_android.mpb
    port/java/using_openjdk.mpb
  }

  Inline_Files {
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/filters
    include/madara/logger/Logger.inl
    include/madara/utility
    include/madara/threads/Threader.inl
    include/madara/threads/WorkerThread.inl
    include/madara/transport/Transport.inl
    include/madara/transport/TransportSettings.inl
    include/madara/transport/BandwidthMonitor.inl
    include/madara/expression
  }

  Template_Files {
    include/madara/utility/LQueue.cpp
    include/madara/utility/LStack.cpp
    include/madara/utility/Refcounter.cpp
    include/madara/utility/ThreadSafeRefcounter.cpp
    include/madara/utility/ThreadSafeVector.cpp
    include/madara/knowledge/containers/TypedVector.cpp
  }

  Source_Files {
    include/madara/expression
    include/madara/filters
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/logger
    include/madara/threads
    include/madara/transport/tcp
    include/madara/transport/udp
    include/madara/transport/multicast
    include/madara/transport/broadcast
    include/madara/transport/BandwidthMonitor.cpp
    include/madara/transport/MessageHeader.cpp
    include/madara/transport/PacketScheduler.cpp
    include/madara/transport/ReducedMessageHeader.cpp
    include/madara/transport/QoSTransportSettings.cpp
    include/madara/transport/Fragmentation.cpp
    include/madara/transport/TransportSettings.cpp
    include/madara/transport/TransportContext.cpp
    include/madara/transport/Transport.cpp
    include/madara/utility/Utility.cpp
    include/madara/utility/SimTime.cpp
    include/madara/utility/Refcounter.cpp
    include/pugi
  }

  Header_Files {
    include/madara/expression
    include/madara/filters
    include/madara/knowledge
    include/madara/knowledge/containers
    include/madara/logger
    include/madara/threads
    include/madara/transport/tcp
    include/madara/transport/udp
    include/madara/transport/multicast
    include/madara/transport/broadcast
    include/madara/transport/BandwidthMonitor.h
    include/madara/transport/Transport.h
    include/madara/transport/MessageHeader.h
    include/madara/transport/PacketScheduler.h
    include/madara/transport/ReducedMessageHeader.h
    include/madara/transport/Fragmentation.h
    include/madara/transport/QoSTransportSettings.h
    include/madara/transport/TransportSettings.h
    include/madara/transport/TransportContext.h
    include/madara/utility
    include/madara/MADARA_export.h
    include/madara/LockType.h
    include/madara/Namespaces.h
    include/pugi
  }
}

project (Madara_Version) : using_madara, using_ace {
  exeout = $(MADARA_ROOT)/bin
  exename = madara_version

  verbatim (gnuace, local) {
    CPPFLAGS += -std=c++11 -Wall
  }
  
  Documentation_Files {
  }
  
  Build_Files {
    Madara.mpc
  }

  Header_Files {
  }

  Source_Files {
    tests/madara_version.cpp
  }
}


project (Madara_Jar) : using_madara, using_ace {
  requires += java

  prebuild += "$(JAVA_HOME)/bin/javac" -sourcepath port/java/src port/java/src/com/madara/tests/*.java port/java/src/com/madara/*.java port/java/src/com/madara/util/*.java port/java/src/com/madara/transport/*.java port/java/src/com/madara/threads/*.java port/java/src/com/madara/transport/filters/*.java port/java/src/com/madara/containers/*.java
  postbuild += "$(JAVA_HOME)/bin/jar" cf lib/madara.jar -C port/java/src .

  Documentation_Files {
    port/java/src/*.java
    port/java/src/com/madara/*.java
    port/java/src/com/madara/util/*.java
    port/java/src/com/madara/transport/*.java
    port/java/src/com/madara/threads/*.java
    port/java/src/com/madara/transport/filters/*.java
    port/java/src/com/madara/containers/*.java
  }
  
  Build_Files {
    Madara.mpc
  }

  Header_Files {
  }

  Source_Files {
  }
}


project (KaRL) : using_ace, using_madara, no_karl {
  exeout = $(MADARA_ROOT)/bin
  exename = karl
  
  verbatim (gnuace, local) {
    CPPFLAGS += -std=c++11 -Wall
  }
  
  Documentation_Files {
  }

  Build_Files {
    Madara.mpc
  }
                                                                
  Header_Files {
  }

  Source_Files {
    tools/karl.cpp
  }
}

project (Madara_Registry) : using_ace, using_madara, no_karl {
  exeout = $(MADARA_ROOT)/bin
  exename = madara_registry
  
  verbatim (gnuace, local) {
    CPPFLAGS += -std=c++11 -Wall
  }
  
  Documentation_Files {
  }

  Build_Files {
    Madara.mpc
  }
                                                                
  Header_Files {
  }

  Source_Files {
    tools/madara_registry.cpp
  }
}


project (MPGen) : using_ace, using_madara {
  exeout = $(MADARA_ROOT)/bin
  exename = mpgen
  
  verbatim (gnuace, local) {
    CPPFLAGS += -std=c++11 -Wall
  }
  
  Documentation_Files {
  }

  Build_Files {
    Madara.mpc
  }
                                                                
  Header_Files {
  }

  Source_Files {
    tools/mpgen.cpp
  }
}
